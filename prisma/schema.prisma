// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ORG
}

enum UserRole {
  BASIC
  PRO
  PREMIUM
  ULTRA
}

enum OrgRole {
  BASIC
  PRO
  PREMIUM
  ULTRA
}

enum RegistrationStatus {
  EMAIL_VERIFICATION_PENDING
  EMAIL_VERIFIED
  FULLY_REGISTERED
}



model VerificationToken {
  email     String   @id
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  role               Role               @default(USER)
  password           String
  registrationStatus RegistrationStatus @default(EMAIL_VERIFICATION_PENDING)
  createdAt          DateTime           @default(now())

  // One to many relation to the verification tokens
  refreshTokens RefreshToken[]
  // One to One relation to the profile
  userProfile   UserProfile?
  // One to One relation to the organization
  organization  Organization?
}

model UserProfile {
  id           String       @id @default(uuid())
  name         String
  location     String
  university   University[]
  interest     String[]
  introduction String
  position     String
  role         UserRole     @default(BASIC)

  resume      String
  profilePicture String

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model University {
  id        String @id @default(uuid())
  name      String
  startYear Int
  endYear   Int?
  degree    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile UserProfile @relation(fields: [userId], references: [id])
  userId      String      @unique
}

enum organizationType {
  STARTUP
  SME
  CORPORATE
  NGO
}

enum organizationSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  location    String
  description String
  type       organizationType
  size        organizationSize
  role        OrgRole  @default(BASIC)
  website     String?
  logo        String
  posts       organizationPost[]

  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


enum PostStatus {
  OPEN
  CLOSED
}

model organizationPost{
  id          String   @id @default(uuid())
  title       String
  salaryMin   Int
  salaryMax   Int  
  skills       String[]
  education   String[]
  experience  Int
  responsibilities String[]
  description String
  deadline    DateTime

  status      PostStatus @default(OPEN)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}
